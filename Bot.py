import logging
import random
import time
import sqlite3
from datetime import datetime, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler
)
import requests
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "YOUR_BOT_TOKEN"
COINGATE_API_TOKEN = "YOUR_COINGATE_API_TOKEN"
COINGATE_API_URL = "https://api.coingate.com/api/v2/orders"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CAPTCHA, LANGUAGE, MAIN_MENU, CITY, CATEGORY, DISTRICT, DELIVERY, CONFIRMATION, PAYMENT, BALANCE, SUPPORT, BONUSES, RULES, REVIEWS = range(14)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        language TEXT DEFAULT 'ru',
        captcha_passed INTEGER DEFAULT 0,
        ban_until TIMESTAMP NULL,
        failed_payments INTEGER DEFAULT 0,
        purchase_count INTEGER DEFAULT 0,
        discount INTEGER DEFAULT 0,
        balance REAL DEFAULT 0.0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        currency TEXT,
        status TEXT,
        order_id TEXT,
        payment_url TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        product_info TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS purchases (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product TEXT,
        price REAL,
        district TEXT,
        delivery_type TEXT,
        purchase_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT DEFAULT 'completed',
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def update_user(user_id, **kwargs):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    for key, value in kwargs.items():
        cursor.execute(f'UPDATE users SET {key} = ? WHERE user_id = ?', (value, user_id))
    
    conn.commit()
    conn.close()

def add_transaction(user_id, amount, currency, order_id, payment_url, expires_at, product_info):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO transactions (user_id, amount, currency, status, order_id, payment_url, expires_at, product_info)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, amount, currency, 'pending', order_id, payment_url, expires_at, product_info))
    
    conn.commit()
    conn.close()

def add_purchase(user_id, product, price, district, delivery_type):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO purchases (user_id, product, price, district, delivery_type)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, product, price, district, delivery_type))
    
    conn.commit()
    conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('SELECT purchase_count FROM users WHERE user_id = ?', (user_id,))
    purchase_count = cursor.fetchone()[0] + 1
    cursor.execute('UPDATE users SET purchase_count = ? WHERE user_id = ?', (purchase_count, user_id))
    
    conn.commit()
    conn.close()

def get_pending_transactions():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM transactions WHERE status = "pending" AND expires_at > datetime("now")')
    transactions = cursor.fetchall()
    conn.close()
    return transactions

def update_transaction_status(order_id, status):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE transactions SET status = ? WHERE order_id = ?', (status, order_id))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        'captcha': '–î–ª—è –≤—Ö–æ–¥–∞ —Ä–µ—à–∏—Ç–µ –∫–∞–ø—Ç—á—É: {}\n–í–≤–µ–¥–∏—Ç–µ 5 —Ü–∏—Ñ—Ä:',
        'captcha_failed': '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—Ç—á–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
        'language_selected': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π',
        'main_menu': (
            "üè™ –ú–∞–≥–∞–∑–∏–Ω AutoShop\n"
            "üë§ –ò–º—è: {name}\n"
            "üìõ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            "üõí –ü–æ–∫—É–ø–æ–∫: {purchases}\n"
            "üéØ –°–∫–∏–¥–∫–∞: {discount}%\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –ª–∞—Ä–∏"
        ),
        'select_city': '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
        'select_category': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        'select_district': '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:',
        'select_delivery': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:',
        'order_summary': (
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
            "üì¶ –¢–æ–≤–∞—Ä: {product}\n"
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} –ª–∞—Ä–∏\n"
            "üèô –†–∞–π–æ–Ω: {district}\n"
            "üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_type}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        ),
        'payment_method': '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:',
        'payment_instructions': (
            "–û–ø–ª–∞—Ç–∏—Ç–µ {amount} {currency} –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            "`{payment_address}`\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ),
        'payment_timeout': '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.',
        'payment_success': '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à —Ç–æ–≤–∞—Ä:\n\n{product_image}',
        'balance': '–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –ª–∞—Ä–∏',
        'balance_add': '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:',
        'balance_add_success': '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –ª–∞—Ä–∏. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –ª–∞—Ä–∏',
        'support': '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @support_username',
        'bonuses': '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n- –ó–∞ –∫–∞–∂–¥—É—é 5-—é –ø–æ–∫—É–ø–∫—É —Å–∫–∏–¥–∫–∞ 10%\n- –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 50 –ª–∞—Ä–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å',
        'rules': '–ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –Ω–∏–∫–æ–º—É –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ\n2. –û–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n3. –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª - –±–∞–Ω',
        'reviews': '–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: @reviews_channel',
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    },
    'en': {
        'welcome': 'Welcome!',
        'captcha': 'To enter, solve the captcha: {}\nEnter 5 digits:',
        'captcha_failed': 'Invalid captcha! Try again:',
        'language_selected': 'Language set: English',
        'main_menu': (
            "üè™ AutoShop Store\n"
            "üë§ Name: {name}\n"
            "üìõ Username: @{username}\n"
            "üõí Purchases: {purchases}\n"
            "üéØ Discount: {discount}%\n"
            "üí∞ Balance: {balance} lari"
        ),
        'select_city': 'Select city:',
        'select_category': 'Select category:',
        'select_district': 'Select district:',
        'select_delivery': 'Select delivery type:',
        'order_summary': (
            "Order information:\n"
            "üì¶ Product: {product}\n"
            "üíµ Price: {price} lari\n"
            "üèô District: {district}\n"
            "üöö Delivery type: {delivery_type}\n\n"
            "Is everything correct?"
        ),
        'payment_method': 'Select payment method:',
        'payment_instructions': (
            "Pay {amount} {currency} to address:\n"
            "`{payment_address}`\n\n"
            "You have 30 minutes to pay. After payment, the product will be sent automatically."
        ),
        'payment_timeout': 'Payment time has expired. Order canceled.',
        'payment_success': 'Payment received! Your product:\n\n{product_image}',
        'balance': 'Your balance: {balance} lari',
        'balance_add': 'Enter the amount to top up your balance:',
        'balance_add_success': 'Balance topped up by {amount} lari. Current balance: {balance} lari',
        'support': 'For all questions contact @support_username',
        'bonuses': 'Bonus system:\n- 10% discount for every 5th purchase\n- Invite a friend and get 50 lari on your balance',
        'rules': 'Rules:\n1. Do not share order information with anyone\n2. Payment only within 30 minutes\n3. Ban for breaking the rules',
        'reviews': 'Our reviews: @reviews_channel',
        'error': 'An error occurred. Please try again later.'
    },
    'ka': {
        'welcome': '·Éô·Éî·Éó·Éò·Éö·Éò ·Éò·Éß·Éù·É° ·Éó·É•·Éï·Éî·Éú·Éò ·Éõ·Éù·Éë·É†·É´·Éê·Éú·Éî·Éë·Éê!',
        'captcha': '·É®·Éî·É°·Éê·É°·Éï·Éö·Éî·Éö·Éê·Éì ·Éí·Éê·Éì·Éê·É¨·Éß·Éï·Éò·É¢·Éî·Éó captcha: {}\n·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó 5 ·É™·Éò·É§·É†·Éò:',
        'captcha_failed': '·Éê·É†·Éê·É°·É¨·Éù·É†·Éò captcha! ·É°·É™·Éê·Éì·Éî·Éó ·Éó·Éê·Éï·Éò·Éì·Éê·Éú:',
        'language_selected': '·Éî·Éú·Éê ·Éì·Éê·Éß·Éî·Éú·Éî·Éë·É£·Éö·Éò·Éê: ·É•·Éê·É†·Éó·É£·Éö·Éò',
        'main_menu': (
            "üè™ AutoShop ·Éõ·Éê·É¶·Éê·Éñ·Éò·Éê\n"
            "üë§ ·É°·Éê·ÉÆ·Éî·Éö·Éò: {name}\n"
            "üìõ ·Éõ·Éù·Éõ·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éö·Éò·É° ·É°·Éê·ÉÆ·Éî·Éö·Éò: @{username}\n"
            "üõí ·Éß·Éò·Éì·Éï·Éî·Éë·Éò: {purchases}\n"
            "üéØ ·É§·Éê·É°·Éì·Éê·Éô·Éö·Éî·Éë·Éê: {discount}%\n"
            "üí∞ ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance} ·Éö·Éê·É†·Éò"
        ),
        'select_city': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·É•·Éê·Éö·Éê·É•·Éò:',
        'select_category': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éô·Éê·É¢·Éî·Éí·Éù·É†·Éò·Éê:',
        'select_district': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·É†·Éê·Éò·Éù·Éú·Éò:',
        'select_delivery': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É° ·É¢·Éò·Éû·Éò:',
        'order_summary': (
            "·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê:\n"
            "üì¶ ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò: {product}\n"
            "üíµ ·É§·Éê·É°·Éò: {price} ·Éö·Éê·É†·Éò\n"
            "üèô ·É†·Éê·Éò·Éù·Éú·Éò: {district}\n"
            "üöö ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É° ·É¢·Éò·Éû·Éò: {delivery_type}\n\n"
            "·Éß·Éï·Éî·Éö·Éê·É§·Éî·É†·Éò ·É°·É¨·Éù·É†·Éò·Éê?"
        ),
        'payment_method': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éõ·Éî·Éó·Éù·Éì·Éò:',
        'payment_instructions': (
            "·Éí·Éê·Éì·Éê·Éò·ÉÆ·Éê·Éì·Éî·Éó {amount} {currency} ·Éõ·Éò·É°·Éê·Éõ·Éê·É†·Éó·Éñ·Éî:\n"
            "`{payment_address}`\n\n"
            "·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É°·Éó·Éï·Éò·É° ·Éí·Éê·É•·Éï·Éó 30 ·É¨·É£·Éó·Éò. ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò ·Éí·Éê·Éõ·Éù·Éí·Éî·Éí·Éñ·Éê·Éï·Éú·Éî·Éë·Éê·Éó ·Éê·Éï·É¢·Éù·Éõ·Éê·É¢·É£·É†·Éê·Éì."
        ),
        'payment_timeout': '·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éì·É†·Éù ·Éê·Éõ·Éù·Éò·É¨·É£·É†·Éê. ·É®·Éî·Éô·Éï·Éî·Éó·Éê ·Éí·Éê·É£·É•·Éõ·Éî·Éë·É£·Éö·Éò·Éê.',
        'payment_success': '·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éõ·Éò·É¶·Éî·Éë·É£·Éö·Éò·Éê! ·Éó·É•·Éï·Éî·Éú·Éò ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò:\n\n{product_image}',
        'balance': '·Éó·É•·Éï·Éî·Éú·Éò ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance} ·Éö·Éê·É†·Éò',
        'balance_add': '·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó ·Éë·Éê·Éö·Éê·Éú·É°·Éò·É° ·É®·Éî·Éï·É°·Éî·Éë·Éò·É° ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê:',
        'balance_add_success': '·Éë·Éê·Éö·Éê·Éú·É°·Éò ·É®·Éî·Éò·Éï·É°·Éù {amount} ·Éö·Éê·É†·Éò·Éó. ·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance} ·Éö·Éê·É†·Éò',
        'support': '·Éß·Éï·Éî·Éö·Éê ·Éô·Éò·Éó·ÉÆ·Éï·Éò·É°·Éó·Éï·Éò·É° ·Éì·Éê·É£·Éô·Éê·Éï·É®·Éò·É†·Éì·Éò·Éó @support_username',
        'bonuses': '·Éë·Éù·Éú·É£·É° ·É°·Éò·É°·É¢·Éî·Éõ·Éê:\n- ·Éß·Éù·Éï·Éî·Éö ·Éõ·Éî-5 ·Éß·Éò·Éì·Éï·Éê·Éñ·Éî 10% ·É§·Éê·É°·Éì·Éê·Éô·Éö·Éî·Éë·Éê\n- ·Éõ·Éù·Éò·É¨·Éï·Éò·Éî ·Éõ·Éî·Éí·Éù·Éë·Éê·É†·Éò ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî 50 ·Éö·Éê·É†·Éò ·Éë·Éê·Éö·Éê·Éú·É°·Éñ·Éî',
        'rules': '·É¨·Éî·É°·Éî·Éë·Éò:\n1. ·Éê·É†·Éê·Éï·Éò·É° ·Éê·É† ·É®·Éî·Éê·ÉÆ·Éù·Éó ·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê\n2. ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éõ·ÉÆ·Éù·Éö·Éù·Éì 30 ·É¨·É£·Éó·Éò·É° ·Éí·Éê·Éú·Éõ·Éê·Éï·Éö·Éù·Éë·Éê·É®·Éò\n3. ·É¨·Éî·É°·Éî·Éë·Éò·É° ·Éì·Éê·É†·É¶·Éï·Éî·Éï·Éê·Éñ·Éî - ·Éë·Éê·Éú·Éò',
        'reviews': '·É©·Éï·Éî·Éú·Éò ·Éõ·Éò·Éõ·Éù·ÉÆ·Éò·Éö·Éï·Éî·Éë·Éò: @reviews_channel',
        'error': '·Éõ·Éù·ÉÆ·Éì·Éê ·É®·Éî·É™·Éì·Éù·Éõ·Éê. ·É°·É™·Éê·Éì·Éî·Éó ·Éõ·Éù·Éí·Éï·Éò·Éê·Éú·Éî·Éë·Éò·Éó.'
    }
}

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
PRODUCTS = {
    '–¢–±–∏–ª–∏—Å–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'},
        '0.5 –º–µ—Ñ –∑–æ–ª–æ—Ç–æ–π': {'price': 150, 'image': 'https://example.com/image3.jpg'},
        '0.3 –∫—Ä–∞—Å–Ω—ã–π': {'price': 100, 'image': 'https://example.com/image4.jpg'}
    },
    '–ö—É—Ç–∞–∏—Å–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'}
    },
    '–ë–∞—Ç—É–º–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'}
    }
}

DISTRICTS = {
    '–¢–±–∏–ª–∏—Å–∏': ['–¶–µ—Ä–µ—Ç–µ–ª–∏', '–¶–µ–Ω—Ç—Ä', '–°–∞–±—É—Ä—Ç–∞–ª–æ'],
    '–ö—É—Ç–∞–∏—Å–∏': ['–¶–µ–Ω—Ç—Ä', '–ó–∞–ø–∞–¥–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π'],
    '–ë–∞—Ç—É–º–∏': ['–¶–µ–Ω—Ç—Ä', '–ë—É–ª—å–≤–∞—Ä', '–°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥']
}

DELIVERY_TYPES = ['–ü–æ–¥—ä–µ–∑–¥', '–ü—Ä–∏–∫–æ–ø', '–ú–∞–≥–Ω–∏—Ç', '–í–æ –¥–≤–æ—Ä–∞—Ö']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def get_text(lang, key, **kwargs):
    text = TEXTS[lang][key]
    if kwargs:
        text = text.format(**kwargs)
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_banned(user_id):
    user = get_user(user_id)
    if user and user[5]:  # ban_until
        ban_until = datetime.strptime(user[5], '%Y-%m-%d %H:%M:%S')
        if ban_until > datetime.now():
            return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CoinGate
def create_coingate_order(amount, currency, description):
    headers = {
        'Authorization': f'Token {COINGATE_API_TOKEN}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'order_id': f'order_{int(time.time())}',
        'price_amount': amount,
        'price_currency': 'USD',
        'receive_currency': currency,
        'title': description,
        'callback_url': 'https://yourdomain.com/callback',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        'cancel_url': 'https://yourdomain.com/cancel',
        'success_url': 'https://yourdomain.com/success'
    }
    
    try:
        response = requests.post(COINGATE_API_URL, headers=headers, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error creating CoinGate order: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def check_payment_status(order_id):
    headers = {
        'Authorization': f'Token {COINGATE_API_TOKEN}'
    }
    
    try:
        response = requests.get(f'{COINGATE_API_URL}/{order_id}', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error checking payment status: {e}")
        return None

# –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def check_pending_transactions():
    while True:
        try:
            transactions = get_pending_transactions()
            for transaction in transactions:
                order_id = transaction[5]
                status_info = check_payment_status(order_id)
                
                if status_info:
                    status = status_info.get('status')
                    if status == 'paid':
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        update_transaction_status(order_id, 'paid')
                        
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                        user_id = transaction[1]
                        product_info = transaction[8]
                        
                        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        # ...
                        
                    elif status == 'expired' or status == 'canceled':
                        update_transaction_status(order_id, status)
            
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"Error in check_pending_transactions: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
Thread(target=check_pending_transactions, daemon=True).start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
def start(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_banned(user_id):
        update.message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = get_user(user_id)
    if existing_user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∫–∞–ø—Ç—á—É
        if existing_user[4]:  # captcha_passed
            lang = existing_user[3] or 'ru'
            update.message.reply_text(get_text(lang, 'welcome'))
            show_main_menu(update, context, user_id, lang)
            return MAIN_MENU
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—Ç—á—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    captcha_code = ''.join(random.choices('0123456789', k=5))
    context.user_data['captcha'] = captcha_code
    
    update.message.reply_text(
        get_text('ru', 'captcha', code=captcha_code),
        reply_markup=ReplyKeyboardRemove()
    )
    return CAPTCHA

def check_captcha(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text
    user = update.message.from_user
    
    if user_input == context.user_data.get('captcha'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR IGNORE INTO users (user_id, username, first_name, captcha_passed) VALUES (?, ?, ?, ?)',
            (user.id, user.username, user.first_name, 1)
        )
        conn.commit()
        conn.close()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        keyboard = [
            [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='ru')],
            [InlineKeyboardButton("English", callback_data='en')],
            [InlineKeyboardButton("·É•·Éê·É†·Éó·É£·Éö·Éò", callback_data='ka')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / ·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éî·Éú·Éê:', reply_markup=reply_markup)
        return LANGUAGE
    else:
        update.message.reply_text(get_text('ru', 'captcha_failed'))
        return CAPTCHA

def set_language(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    lang_code = query.data
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    update_user(user_id, language=lang_code)
    
    query.answer()
    query.edit_message_text(text=get_text(lang_code, 'language_selected'))
    
    show_main_menu(update, context, user_id, lang_code)
    return MAIN_MENU

def show_main_menu(update, context, user_id, lang):
    user = get_user(user_id)
    text = get_text(
        lang, 
        'main_menu', 
        name=user[2],  # first_name
        username=user[1] or 'N/A',  # username
        purchases=user[7] or 0,  # purchase_count
        discount=user[8] or 0,  # discount
        balance=user[9] or 0  # balance
    )
    
    buttons = [
        ['üõí –ö—É–ø–∏—Ç—å', 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        ['üéÅ –ë–æ–Ω—É—Å—ã', 'üìö –ü—Ä–∞–≤–∏–ª–∞'],
        ['üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä', 'üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
        ['üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', '‚≠ê –û—Ç–∑—ã–≤—ã'],
        ['üåê –ù–∞—à —Å–∞–π—Ç', 'ü§ñ –õ–∏—á–Ω—ã–π –±–æ—Ç']
    ]
    
    if hasattr(update, 'message'):
        update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    else:
        update.callback_query.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

def handle_main_menu(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    text = update.message.text
    
    if text == 'üõí –ö—É–ø–∏—Ç—å':
        cities_keyboard = [[city] for city in PRODUCTS.keys()]
        update.message.reply_text(
            get_text(lang, 'select_city'),
            reply_markup=ReplyKeyboardMarkup(cities_keyboard, resize_keyboard=True)
        )
        return CITY
    elif text == 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        update.message.reply_text(
            get_text(lang, 'balance_add'),
            reply_markup=ReplyKeyboardRemove()
        )
        return BALANCE
    elif text == 'üéÅ –ë–æ–Ω—É—Å—ã':
        update.message.reply_text(get_text(lang, 'bonuses'))
        return MAIN_MENU
    elif text == 'üìö –ü—Ä–∞–≤–∏–ª–∞':
        update.message.reply_text(get_text(lang, 'rules'))
        return MAIN_MENU
    elif text == 'üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä':
        update.message.reply_text(get_text(lang, 'support'))
        return MAIN_MENU
    elif text == 'üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        update.message.reply_text(get_text(lang, 'support'))
        return MAIN_MENU
    elif text == 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª':
        update.message.reply_text("https://t.me/your_channel")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
        return MAIN_MENU
    elif text == '‚≠ê –û—Ç–∑—ã–≤—ã':
        update.message.reply_text(get_text(lang, 'reviews'))
        return MAIN_MENU
    elif text == 'üåê –ù–∞—à —Å–∞–π—Ç':
        update.message.reply_text("https://yourwebsite.com")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–∞–π—Ç
        return MAIN_MENU
    elif text == 'ü§ñ –õ–∏—á–Ω—ã–π –±–æ—Ç':
        update.message.reply_text("https://t.me/your_bot")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        return MAIN_MENU
    
    return MAIN_MENU

def handle_city(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    city = update.message.text
    
    if city not in PRODUCTS:
        update.message.reply_text(get_text(lang, 'error'))
        return CITY
    
    context.user_data['city'] = city
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    categories = list(PRODUCTS[city].keys())
    categories_keyboard = [[cat] for cat in categories]
    
    update.message.reply_text(
        get_text(lang, 'select_category'),
        reply_markup=ReplyKeyboardMarkup(categories_keyboard, resize_keyboard=True)
    )
    return CATEGORY

def handle_category(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    category = update.message.text
    city = context.user_data.get('city')
    
    if city not in PRODUCTS or category not in PRODUCTS[city]:
        update.message.reply_text(get_text(lang, 'error'))
        return CATEGORY
    
    context.user_data['category'] = category
    context.user_data['price'] = PRODUCTS[city][category]['price']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–π–æ–Ω–∞–º–∏
    districts = DISTRICTS.get(city, [])
    districts_keyboard = [[district] for district in districts]
    
    update.message.reply_text(
        get_text(lang, 'select_district'),
        reply_markup=ReplyKeyboardMarkup(districts_keyboard, resize_keyboard=True)
    )
    return DISTRICT

def handle_district(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    district = update.message.text
    city = context.user_data.get('city')
    
    if city not in DISTRICTS or district not in DISTRICTS[city]:
        update.message.reply_text(get_text(lang, 'error'))
        return DISTRICT
    
    context.user_data['district'] = district
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_keyboard = [[del_type] for del_type in DELIVERY_TYPES]
    
    update.message.reply_text(
        get_text(lang, 'select_delivery'),
        reply_markup=ReplyKeyboardMarkup(delivery_keyboard, resize_keyboard=True)
    )
    return DELIVERY

def handle_delivery(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    delivery_type = update.message.text
    
    if delivery_type not in DELIVERY_TYPES:
        update.message.reply_text(get_text(lang, 'error'))
        return DELIVERY
    
    context.user_data['delivery_type'] = delivery_type
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    city = context.user_data.get('city')
    category = context.user_data.get('category')
    price = context.user_data.get('price')
    district = context.user_data.get('district')
    
    order_text = get_text(
        lang, 
        'order_summary',
        product=category,
        price=price,
        district=district,
        delivery_type=delivery_type
    )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']
    ]
    
    update.message.reply_text(
        order_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CONFIRMATION

def handle_confirmation(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    confirmation = update.message.text
    
    if confirmation == '‚úÖ –î–∞':
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ CoinGate
        city = context.user_data.get('city')
        category = context.user_data.get('category')
        price = context.user_data.get('price')
        district = context.user_data.get('district')
        delivery_type = context.user_data.get('delivery_type')
        
        product_info = f"{category} –≤ {city}, —Ä–∞–π–æ–Ω {district}, {delivery_type}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ CoinGate
        order = create_coingate_order(price, 'USD', product_info)
        
        if order:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É
            expires_at = datetime.now() + timedelta(minutes=30)
            add_transaction(
                user.id,
                price,
                'USD',
                order['id'],
                order['payment_url'],
                expires_at,
                product_info
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
            payment_text = get_text(
                lang,
                'payment_instructions',
                amount=price,
                currency='USD',
                payment_address=order['payment_url']
            )
            
            update.message.reply_text(
                payment_text,
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
            context.job_queue.run_once(
                check_payment,
                1800,  # 30 –º–∏–Ω—É—Ç
                context={
                    'user_id': user.id,
                    'order_id': order['id'],
                    'chat_id': update.message.chat_id,
                    'message_id': update.message.message_id,
                    'product_info': product_info,
                    'lang': lang
                }
            )
            
            return PAYMENT
        else:
            update.message.reply_text(get_text(lang, 'error'))
            return CONFIRMATION
    else:
        show_main_menu(update, context, user.id, lang)
        return MAIN_MENU

def check_payment(context: CallbackContext):
    job = context.job
    order_id = job.context['order_id']
    user_id = job.context['user_id']
    chat_id = job.context['chat_id']
    lang = job.context['lang']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    status_info = check_payment_status(order_id)
    
    if status_info and status_info.get('status') == 'paid':
        # –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        product_info = job.context['product_info']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_purchase(
            user_id,
            product_info,
            status_info['price_amount'],
            '',  # district
            ''   # delivery_type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        context.bot.send_message(
            chat_id=chat_id,
            text=get_text(lang, 'payment_success', product_image=PRODUCTS[job.context['city']][job.context['category']]['image'])
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        update_transaction_status(order_id, 'paid')
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–ª—É—á–µ–Ω
        context.bot.send_message(
            chat_id=chat_id,
            text=get_text(lang, 'payment_timeout')
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        user = get_user(user_id)
        failed_payments = user[6] + 1  # failed_payments
        update_user(user_id, failed_payments=failed_payments)
        
        # –ï—Å–ª–∏ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞, –±–∞–Ω –Ω–∞ 24 —á–∞—Å–∞
        if failed_payments >= 3:
            ban_until = datetime.now() + timedelta(hours=24)
            update_user(user_id, ban_until=ban_until)
            context.bot.send_message(
                chat_id=chat_id,
                text=get_text(lang, 'ban_message')
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        update_transaction_status(order_id, 'expired')

def handle_balance(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    amount_text = update.message.text
    
    try:
        amount = float(amount_text)
        if amount <= 0:
            update.message.reply_text(get_text(lang, 'error'))
            return BALANCE
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_balance = user_data[9] or 0
        new_balance = current_balance + amount
        update_user(user.id, balance=new_balance)
        
        update.message.reply_text(
            get_text(lang, 'balance_add_success', amount=amount, balance=new_balance)
        )
        
        show_main_menu(update, context, user.id, lang)
        return MAIN_MENU
    except ValueError:
        update.message.reply_text(get_text(lang, 'error'))
        return BALANCE

def cancel(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data[3] or 'ru'
    
    update.message.reply_text(
        get_text(lang, 'cancel_text'),
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def error(update: Update, context: CallbackContext):
    logger.warning('Update "%s" caused error "%s"', update, context.error)
    
    try:
        user = update.message.from_user
        user_data = get_user(user.id)
        lang = user_data[3] or 'ru'
        update.message.reply_text(get_text(lang, 'error'))
    except:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(TOKEN, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CAPTCHA: [MessageHandler(Filters.text & ~Filters.command, check_captcha)],
            LANGUAGE: [CallbackQueryHandler(set_language)],
            MAIN_MENU: [MessageHandler(Filters.text, handle_main_menu)],
            CITY: [MessageHandler(Filters.text, handle_city)],
            CATEGORY: [MessageHandler(Filters.text, handle_category)],
            DISTRICT: [MessageHandler(Filters.text, handle_district)],
            DELIVERY: [MessageHandler(Filters.text, handle_delivery)],
            CONFIRMATION: [MessageHandler(Filters.text, handle_confirmation)],
            BALANCE: [MessageHandler(Filters.text, handle_balance)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç Ctrl-C
    updater.idle()

if __name__ == '__main__':
    main()
