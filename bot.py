import logging
import random
import time
import asyncio
import os
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes
)
import requests
import psycopg2
from psycopg2.extras import RealDictCursor
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
COINGATE_API_TOKEN = os.getenv("COINGATE_API_TOKEN", "YOUR_COINGATE_API_TOKEN")
COINGATE_API_URL = "https://api.coingate.com/api/v2/orders"
DATABASE_URL = os.environ['DATABASE_URL']

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CAPTCHA, LANGUAGE, MAIN_MENU, CITY, CATEGORY, DISTRICT, DELIVERY, CONFIRMATION, PAYMENT, BALANCE = range(10)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        language TEXT DEFAULT 'ru',
        captcha_passed INTEGER DEFAULT 0,
        ban_until TIMESTAMP NULL,
        failed_payments INTEGER DEFAULT 0,
        purchase_count INTEGER DEFAULT 0,
        discount INTEGER DEFAULT 0,
        balance REAL DEFAULT 0.0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        amount REAL,
        currency TEXT,
        status TEXT,
        order_id TEXT,
        payment_url TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        product_info TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS purchases (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        product TEXT,
        price REAL,
        district TEXT,
        delivery_type TEXT,
        purchase_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT DEFAULT 'completed',
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def update_user(user_id, **kwargs):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    
    for key, value in kwargs.items():
        cursor.execute(f'UPDATE users SET {key} = %s WHERE user_id = %s', (value, user_id))
    
    conn.commit()
    conn.close()

def add_transaction(user_id, amount, currency, order_id, payment_url, expires_at, product_info):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO transactions (user_id, amount, currency, status, order_id, payment_url, expires_at, product_info)
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
    ''', (user_id, amount, currency, 'pending', order_id, payment_url, expires_at, product_info))
    
    conn.commit()
    conn.close()

def add_purchase(user_id, product, price, district, delivery_type):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO purchases (user_id, product, price, district, delivery_type)
    VALUES (%s, %s, %s, %s, %s)
    ''', (user_id, product, price, district, delivery_type))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('SELECT purchase_count FROM users WHERE user_id = %s', (user_id,))
    result = cursor.fetchone()
    purchase_count = result[0] + 1 if result else 1
    cursor.execute('UPDATE users SET purchase_count = %s WHERE user_id = %s', (purchase_count, user_id))
    
    conn.commit()
    conn.close()

def get_pending_transactions():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute('SELECT * FROM transactions WHERE status = %s AND expires_at > NOW()', ('pending',))
    transactions = cursor.fetchall()
    conn.close()
    return transactions

def update_transaction_status(order_id, status):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()
    cursor.execute('UPDATE transactions SET status = %s WHERE order_id = %s', (status, order_id))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        'captcha': '–î–ª—è –≤—Ö–æ–¥–∞ —Ä–µ—à–∏—Ç–µ –∫–∞–ø—Ç—á—É: {code}\n–í–≤–µ–¥–∏—Ç–µ 5 —Ü–∏—Ñ—Ä:',
        'captcha_failed': '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—Ç—á–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
        'language_selected': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π',
        'main_menu': (
            "üë§ –ò–º—è: {name}\n"
            "üìõ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            "üõí –ü–æ–∫—É–ø–æ–∫: {purchases}\n"
            "üéØ –°–∫–∏–¥–∫–∞: {discount}%\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –ª–∞—Ä–∏"
        ),
        'select_city': '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
        'select_category': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        'select_district': '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:',
        'select_delivery': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:',
        'order_summary': (
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
            "üì¶ –¢–æ–≤–∞—Ä: {product}\n"
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} –ª–∞—Ä–∏\n"
            "üèô –†–∞–π–æ–Ω: {district}\n"
            "üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_type}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        ),
        'payment_method': '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:',
        'payment_instructions': (
            "–û–ø–ª–∞—Ç–∏—Ç–µ {amount} {currency} –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            "`{payment_address}`\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ),
        'payment_timeout': '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.',
        'payment_success': '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à —Ç–æ–≤–∞—Ä:\n\n{product_image}',
        'balance': '–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –ª–∞—Ä–∏',
        'balance_add': '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:',
        'balance_add_success': '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –ª–∞—Ä–∏. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –ª–∞—Ä–∏',
        'support': '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @support_username',
        'bonuses': '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n- –ó–∞ –∫–∞–∂–¥—É—é 5-—é –ø–æ–∫—É–ø–∫—É —Å–∫–∏–¥–∫–∞ 10%\n- –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 50 –ª–∞—Ä–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å',
        'rules': '–ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –Ω–∏–∫–æ–º—É –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ\n2. –û–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n3. –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª - –±–∞–Ω',
        'reviews': '–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: @reviews_channel',
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        'ban_message': '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 24 —á–∞—Å–∞ –∏–∑-–∑–∞ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã.',
        'back': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        'main_menu_button': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'last_order': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ',
        'no_orders': '–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤'
    },
    'en': {
        'welcome': 'Welcome!',
        'captcha': 'To enter, solve the captcha: {code}\nEnter 5 digits:',
        'captcha_failed': 'Invalid captcha! Try again:',
        'language_selected': 'Language set: English',
        'main_menu': (
            "üë§ Name: {name}\n"
            "üìõ Username: @{username}\n"
            "üõí Purchases: {purchases}\n"
            "üéØ Discount: {discount}%\n"
            "üí∞ Balance: {balance} lari"
        ),
        'select_city': 'Select city:',
        'select_category': 'Select category:',
        'select_district': 'Select district:',
        'select_delivery': 'Select delivery type:',
        'order_summary': (
            "Order information:\n"
            "üì¶ Product: {product}\n"
            "üíµ Price: {price} lari\n"
            "üèô District: {district}\n"
            "üöö Delivery type: {delivery_type}\n\n"
            "Is everything correct?"
        ),
        'payment_method': 'Select payment method:',
        'payment_instructions': (
            "Pay {amount} {currency} to address:\n"
            "`{payment_address}`\n\n"
            "You have 30 minutes to pay. After payment, the product will be sent automatically."
        ),
        'payment_timeout': 'Payment time has expired. Order canceled.',
        'payment_success': 'Payment received! Your product:\n\n{product_image}',
        'balance': 'Your balance: {balance} lari',
        'balance_add': 'Enter the amount to top up your balance:',
        'balance_add_success': 'Balance topped up by {amount} lari. Current balance: {balance} lari',
        'support': 'For all questions contact @support_username',
        'bonuses': 'Bonus system:\n- 10% discount for every 5th purchase\n- Invite a friend and get 50 lari on your balance',
        'rules': 'Rules:\n1. Do not share order information with anyone\n2. Payment only within 30 minutes\n3. Ban for breaking the rules',
        'reviews': 'Our reviews: @reviews_channel',
        'error': 'An error occurred. Please try again later.',
        'ban_message': 'You are banned for 24 hours due to 3 failed payment attempts.',
        'back': '‚¨ÖÔ∏è Back',
        'main_menu_button': 'üè† Main Menu',
        'last_order': 'Information about last order',
        'no_orders': 'You have no orders yet'
    },
    'ka': {
        'welcome': '·Éô·Éî·Éó·Éò·Éö·Éò ·Éò·Éß·Éù·É° ·Éó·É•·Éï·Éî·Éú·Éò ·Éõ·Éù·Éë·É†·É´·Éê·Éú·Éî·Éë·Éê!',
        'captcha': '·É®·Éî·É°·Éê·É°·Éï·Éö·Éî·Éö·Éê·Éì ·Éí·Éê·Éì·Éê·É¨·Éß·Éï·Éò·É¢·Éî·Éó captcha: {code}\n·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó 5 ·É™·Éò·É§·É†·Éò:',
        'captcha_failed': '·Éê·É†·Éê·É°·É¨·Éù·É†·Éò captcha! ·É°·É™·Éê·Éì·Éî·Éó ·Éó·Éê·Éï·Éò·Éì·Éê·Éú:',
        'language_selected': '·Éî·Éú·Éê ·Éì·Éê·Éß·Éî·Éú·Éî·Éë·É£·Éö·Éò·Éê: ·É•·Éê·É†·Éó·É£·Éö·Éò',
        'main_menu': (
            "üë§ ·É°·Éê·ÉÆ·Éî·Éö·Éò: {name}\n"
            "üìõ ·Éõ·Éù·Éõ·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éö·Éò·É° ·É°·Éê·ÉÆ·Éî·Éö·Éò: @{username}\n"
            "üõí ·Éß·Éò·Éì·Éï·Éî·Éë·Éò: {purchases}\n"
            "üéØ ·É§·Éê·É°·Éì·Éê·Éô·Éö·Éî·Éë·Éê: {discount}%\n"
            "üí∞ ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance} ·Éö·Éê·É†·Éò"
        ),
        'select_city': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·É•·Éê·Éö·Éê·É•·Éò:',
        'select_category': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éô·Éê·É¢·Éî·Éí·Éù·É†·Éò·Éê:',
        'select_district': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·É†·Éê·Éò·Éù·Éú·Éò:',
        'select_delivery': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É° ·É¢·Éò·Éû·Éò:',
        'order_summary': (
            "·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê:\n"
            "üì¶ ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò: {product}\n"
            "üíµ ·É§·Éê·É°·Éò: {price} ·Éö·Éê·É†·Éò\n"
            "üèô ·É†·Éê·Éò·Éù·Éú·Éò: {district}\n"
            "üöö ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É° ·É¢·Éò·Éû·Éò: {delivery_type}\n\n"
            "·Éß·Éï·Éî·Éö·Éê·É§·Éî·É†·Éò ·É°·É¨·Éù·É†·Éò·Éê?"
        ),
        'payment_method': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éõ·Éî·Éó·Éù·Éì·Éò:',
        'payment_instructions': (
            "·Éí·Éê·Éì·Éê·Éò·ÉÆ·Éê·Éì·Éî·Éó {amount} {currency} ·Éõ·Éò·É°·Éê·Éõ·Éê·É†·Éó·Éñ·Éî:\n"
            "`{payment_address}`\n\n"
            "·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É°·Éó·Éï·Éò·É° ·Éí·Éê·É•·Éï·Éó 30 ·É¨·É£·Éó·Éò. ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò ·Éí·Éê·Éõ·Éù·Éí·Éî·Éí·Éñ·Éê·Éï·Éú·Éî·Éë·Éê·Éó ·Éê·Éï·É¢·Éù·Éõ·Éê·É¢·É£·É†·Éê·Éì."
        ),
        'payment_timeout': '·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éì·É†·Éù ·Éê·Éõ·Éù·Éò·É¨·É£·É†·Éê. ·É®·Éî·Éô·Éï·Éî·Éó·Éê ·Éí·Éê·É£·É•·Éõ·Éî·Éë·É£·Éö·Éò·Éê.',
        'payment_success': '·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éõ·Éò·É¶·Éî·Éë·É£·Éö·Éò·Éê! ·Éó·É•·Éï·Éî·Éú·Éò ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò:\n\n{product_image}',
        'balance': '·Éó·É•·Éï·Éî·Éú·Éò ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance} ·Éö·Éê·É†·Éò',
        'balance_add': '·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó ·Éë·Éê·Éö·Éê·Éú·É°·Éò·É° ·É®·Éî·Éï·É°·Éî·Éë·Éò·É° ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê:',
        'balance_add_success': '·Éë·Éê·Éö·Éê·Éú·É°·Éò ·É®·Éî·Éò·Éï·É°·Éù {amount} ·Éö·Éê·É†·Éò·Éó. ·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance} ·Éö·Éê·É†·Éò',
        'support': '·Éß·Éï·Éî·Éö·Éê ·Éô·Éò·Éó·ÉÆ·Éï·Éò·É°·Éó·Éï·Éò·É° ·Éì·Éê·É£·Éô·Éê·Éï·É®·Éò·É†·Éì·Éò·Éó @support_username',
        'bonuses': '·Éë·Éù·Éú·É£·É° ·É°·Éò·É°·É¢·Éî·Éõ·Éê:\n- ·Éß·Éù·Éï·Éî·Éö ·Éõ·Éî-5 ·Éß·Éò·Éì·Éï·Éê·Éñ·Éî 10% ·É§·Éê·É°·Éì·Éê·Éô·Éö·Éî·Éë·Éê\n- ·Éõ·Éù·Éò·É¨·Éï·Éò·Éî ·Éõ·Éî·Éí·Éù·Éë·Éê·É†·Éò ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî 50 ·Éö·Éê·É†·Éò ·Éë·Éê·Éö·Éê·Éú·É°·Éñ·Éî',
        'rules': '·É¨·Éî·É°·Éî·Éë·Éò:\n1. ·Éê·É†·Éê·Éï·Éò·É° ·Éê·É† ·É®·Éî·Éê·ÉÆ·Éù·Éó ·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê\n2. ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éõ·ÉÆ·Éù·Éö·Éù·Éì 30 ·É¨·É£·Éó·Éò·É° ·Éí·Éê·Éú·Éõ·Éê·Éï·Éö·Éù·Éë·Éê·É®·Éò\n3. ·É¨·Éî·É°·Éî·Éë·Éò·É° ·Éì·Éê·É†·É¶·Éï·Éî·Éï·Éê·Éñ·Éî - ·Éë·Éê·Éú·Éò',
        'reviews': '·É©·Éï·Éî·Éú·Éò ·Éõ·Éò·Éõ·Éù·ÉÆ·Éò·Éö·Éï·Éî·Éë·Éò: @reviews_channel',
        'error': '·Éõ·Éù·ÉÆ·Éì·Éê ·É®·Éî·É™·Éì·Éù·Éõ·Éê. ·É°·É™·Éê·Éì·Éî·Éó ·Éõ·Éù·Éí·Éï·Éò·Éê·Éú·Éî·Éë·Éò·Éó.',
        'ban_message': '3 ·É¨·Éê·É†·É£·Éõ·Éê·É¢·Éî·Éë·Éî·Éö·Éò ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éõ·É™·Éì·Éî·Éö·Éù·Éë·Éò·É° ·Éí·Éê·Éõ·Éù ·Éó·É•·Éï·Éî·Éú ·Éì·Éê·Éë·Éö·Éù·Éô·Éò·Éö·Éò ·ÉÆ·Éê·É†·Éó 24 ·É°·Éê·Éê·Éó·Éò·É° ·Éí·Éê·Éú·Éõ·Éê·Éï·Éö·Éù·Éë·Éê·É®·Éò.',
        'back': '‚¨ÖÔ∏è ·É£·Éô·Éê·Éú',
        'main_menu_button': 'üè† ·Éõ·Éó·Éê·Éï·Éê·É†·Éò ·Éõ·Éî·Éú·Éò·É£',
        'last_order': '·Éë·Éù·Éö·Éù ·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê',
        'no_orders': '·ÉØ·Éî·É† ·Éê·É† ·Éí·Éê·É•·Éï·Éó ·É®·Éî·Éô·Éï·Éî·Éó·Éî·Éë·Éò'
    }
}

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
PRODUCTS = {
    '–¢–±–∏–ª–∏—Å–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'},
        '0.5 –º–µ—Ñ –∑–æ–ª–æ—Ç–æ–π': {'price': 150, 'image': 'https://example.com/image3.jpg'},
        '0.3 –∫—Ä–∞—Å–Ω—ã–π': {'price': 100, 'image': 'https://example.com/image4.jpg'}
    },
    '–ì–æ—Ä–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'}
    },
    '–ö—É—Ç–∞–∏—Å–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'}
    },
    '–ë–∞—Ç—É–º–∏': {
        '0.5 –º–µ—Ñ': {'price': 100, 'image': 'https://example.com/image1.jpg'},
        '1.0 –º–µ—Ñ': {'price': 200, 'image': 'https://example.com/image2.jpg'}
    }
}

DISTRICTS = {
    '–¢–±–∏–ª–∏—Å–∏': ['–¶–µ—Ä–µ—Ç–µ–ª–∏', '–¶–µ–Ω—Ç—Ä', '–°–∞–±—É—Ä—Ç–∞–ª–æ'],
    '–ì–æ—Ä–∏': ['–¶–µ–Ω—Ç—Ä', '–ó–∞–ø–∞–¥–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π'],
    '–ö—É—Ç–∞–∏—Å–∏': ['–¶–µ–Ω—Ç—Ä', '–ó–∞–ø–∞–¥–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π'],
    '–ë–∞—Ç—É–º–∏': ['–¶–µ–Ω—Ç—Ä', '–ë—É–ª—å–≤–∞—Ä', '–°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥']
}

DELIVERY_TYPES = ['–ü–æ–¥—ä–µ–∑–¥', '–ü—Ä–∏–∫–æ–ø', '–ú–∞–≥–Ω–∏—Ç', '–í–æ –¥–≤–æ—Ä–∞—Ö']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def get_text(lang, key, **kwargs):
    if lang not in TEXTS:
        lang = 'ru'
    if key not in TEXTS[lang]:
        return f"–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {key}"
    
    text = TEXTS[lang][key]
    try:
        if kwargs:
            text = text.format(**kwargs)
        return text
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}, –∫–ª—é—á: {key}, –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {kwargs}")
        return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_banned(user_id):
    user = get_user(user_id)
    if user and user['ban_until']:
        try:
            ban_until = user['ban_until']
            if isinstance(ban_until, str):
                ban_until = datetime.strptime(ban_until, '%Y-%m-%d %H:%M:%S')
            if ban_until > datetime.now():
                return True
        except ValueError:
            return False
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CoinGate
def create_coingate_order(amount, currency, description):
    headers = {
        'Authorization': f'Token {COINGATE_API_TOKEN}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'order_id': f'order_{int(time.time())}',
        'price_amount': amount,
        'price_currency': 'USD',
        'receive_currency': currency,
        'title': description,
        'callback_url': 'https://yourdomain.com/callback',
        'cancel_url': 'https://yourdomain.com/cancel',
        'success_url': 'https://yourdomain.com/success'
    }
    
    try:
        response = requests.post(COINGATE_API_URL, headers=headers, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error creating CoinGate order: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def check_payment_status(order_id):
    headers = {
        'Authorization': f'Token {COINGATE_API_TOKEN}'
    }
    
    try:
        response = requests.get(f'{COINGATE_API_URL}/{order_id}', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error checking payment status: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_last_order(user_id):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute('SELECT * FROM purchases WHERE user_id = %s ORDER BY purchase_time DESC LIMIT 1', (user_id,))
    order = cursor.fetchone()
    conn.close()
    return order

# –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def check_pending_transactions(app):
    while True:
        try:
            transactions = get_pending_transactions()
            for transaction in transactions:
                order_id = transaction['order_id']
                status_info = check_payment_status(order_id)
                
                if status_info:
                    status = status_info.get('status')
                    if status == 'paid':
                        update_transaction_status(order_id, 'paid')
                        
                        user_id = transaction['user_id']
                        product_info = transaction['product_info']
                        
                        asyncio.run_coroutine_threadsafe(
                            app.bot.send_message(
                                chat_id=user_id,
                                text=get_text('ru', 'payment_success', product_image=PRODUCTS['–¢–±–∏–ª–∏—Å–∏']['0.5 –º–µ—Ñ']['image'])
                            ),
                            app.loop
                        )
                        
                    elif status == 'expired' or status == 'canceled':
                        update_transaction_status(order_id, status)
            
            time.sleep(60)
        except Exception as e:
            logger.error(f"Error in check_pending_transactions: {e}")
            time.sleep(60)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def delete_previous_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    user_id = user.id
    
    if is_banned(user_id):
        await update.message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
        return ConversationHandler.END
    
    existing_user = get_user(user_id)
    if existing_user:
        if existing_user['captcha_passed']:
            lang = existing_user['language'] or 'ru'
            await update.message.reply_text(get_text(lang, 'welcome'))
            await show_main_menu(update, context, user_id, lang)
            return MAIN_MENU
    
    captcha_code = ''.join(random.choices('0123456789', k=5))
    context.user_data['captcha'] = captcha_code
    
    await update.message.reply_text(
        get_text('ru', 'captcha', code=captcha_code)
    )
    return CAPTCHA

async def check_captcha(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    user = update.message.from_user
    
    if user_input == context.user_data.get('captcha'):
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO users (user_id, username, first_name, captcha_passed) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET captcha_passed = %s',
            (user.id, user.username, user.first_name, 1, 1)
        )
        conn.commit()
        conn.close()
        
        keyboard = [
            [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='ru')],
            [InlineKeyboardButton("English", callback_data='en')],
            [InlineKeyboardButton("·É•·Éê·É†·Éó·É£·Éö·Éò", callback_data='ka')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language / ·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éî·Éú·Éê:', reply_markup=reply_markup)
        return LANGUAGE
    else:
        await update.message.reply_text(get_text('ru', 'captcha_failed'))
        return CAPTCHA

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    lang_code = query.data
    
    update_user(user_id, language=lang_code)
    
    await query.answer()
    await query.edit_message_text(text=get_text(lang_code, 'language_selected'))
    
    await show_main_menu(update, context, user_id, lang_code)
    return MAIN_MENU

async def show_main_menu(update, context, user_id, lang):
    user = get_user(user_id)
    if not user:
        return
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_description = "üè™ AutoShop - –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –ì—Ä—É–∑–∏–∏\n\n"
    
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info_text = get_text(
        lang, 
        'main_menu', 
        name=user['first_name'] or 'N/A',
        username=user['username'] or 'N/A',
        purchases=user['purchase_count'] or 0,
        discount=user['discount'] or 0,
        balance=user['balance'] or 0
    )
    
    # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    full_text = shop_description + user_info_text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–¢–±–∏–ª–∏—Å–∏", callback_data="city_–¢–±–∏–ª–∏—Å–∏")],
        [InlineKeyboardButton("–ì–æ—Ä–∏", callback_data="city_–ì–æ—Ä–∏")],
        [InlineKeyboardButton("–ö—É—Ç–∞–∏—Å–∏", callback_data="city_–ö—É—Ç–∞–∏—Å–∏")],
        [InlineKeyboardButton("–ë–∞—Ç—É–º–∏", callback_data="city_–ë–∞—Ç—É–º–∏")],
        [
            InlineKeyboardButton(f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance'] or 0} –ª–∞—Ä–∏", callback_data="balance"),
            InlineKeyboardButton("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", callback_data="last_order")
        ],
        [
            InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data="bonuses"),
            InlineKeyboardButton("üìö –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")
        ],
        [InlineKeyboardButton("üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data="operator")],
        [InlineKeyboardButton("üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", callback_data="channel")],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton("üåê –ù–∞—à —Å–∞–π—Ç", callback_data="website")],
        [InlineKeyboardButton("ü§ñ –õ–∏—á–Ω—ã–π –±–æ—Ç", callback_data="personal_bot")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = "https://github.com/vakhotut/Kryasystem/blob/95692762b04dde6722f334e2051118623e67df47/IMG_20250906_162606_873.jpg?raw=true"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'last_message_id' in context.user_data:
        await delete_previous_message(context, user_id, context.user_data['last_message_id'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    message = await context.bot.send_photo(
        chat_id=user_id,
        photo=image_url,
        caption=full_text,
        reply_markup=reply_markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
    context.user_data['last_message_id'] = message.message_id

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    data = query.data
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    if 'last_message_id' in context.user_data:
        await delete_previous_message(context, user_id, context.user_data['last_message_id'])
    
    if data.startswith('city_'):
        city = data.replace('city_', '')
        context.user_data['city'] = city
        
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in PRODUCTS[city].keys()]
        keyboard.append([InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'select_category'),
            reply_markup=reply_markup
        )
        context.user_data['last_message_id'] = message.message_id
        return CATEGORY
    elif data == 'balance':
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'balance_add')
        )
        context.user_data['last_message_id'] = message.message_id
        return BALANCE
    elif data == 'last_order':
        last_order = get_last_order(user_id)
        if last_order:
            order_text = (
                f"üì¶ –¢–æ–≤–∞—Ä: {last_order['product']}\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {last_order['price']} –ª–∞—Ä–∏\n"
                f"üèô –†–∞–π–æ–Ω: {last_order['district']}\n"
                f"üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {last_order['delivery_type']}\n"
                f"üïê –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {last_order['purchase_time']}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {last_order['status']}"
            )
            message = await context.bot.send_message(
                chat_id=user_id,
                text=order_text
            )
        else:
            message = await context.bot.send_message(
                chat_id=user_id,
                text=get_text(lang, 'no_orders')
            )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'bonuses':
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'bonuses')
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'rules':
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'rules')
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'operator' or data == 'support':
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'support')
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'channel':
        message = await context.bot.send_message(
            chat_id=user_id,
            text="https://t.me/your_channel"
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'reviews':
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'reviews')
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'website':
        message = await context.bot.send_message(
            chat_id=user_id,
            text="https://yourwebsite.com"
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'personal_bot':
        message = await context.bot.send_message(
            chat_id=user_id,
            text="https://t.me/your_bot"
        )
        context.user_data['last_message_id'] = message.message_id
        return MAIN_MENU
    elif data == 'back_to_main':
        await show_main_menu(update, context, user_id, lang)
        return MAIN_MENU
    
    return MAIN_MENU

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    data = query.data
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if 'last_message_id' in context.user_data:
        await delete_previous_message(context, user_id, context.user_data['last_message_id'])
    
    if data == 'back_to_main':
        await show_main_menu(update, context, user_id, lang)
        return MAIN_MENU
    
    category = data.replace('cat_', '')
    city = context.user_data.get('city')
    
    if city not in PRODUCTS or category not in PRODUCTS[city]:
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'error')
        )
        context.user_data['last_message_id'] = message.message_id
        return CATEGORY
    
    context.user_data['category'] = category
    context.user_data['price'] = PRODUCTS[city][category]['price']
    
    districts = DISTRICTS.get(city, [])
    keyboard = [[InlineKeyboardButton(district, callback_data=f"dist_{district}")] for district in districts]
    keyboard.append([InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_category")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=user_id,
        text=get_text(lang, 'select_district'),
        reply_markup=reply_markup
    )
    context.user_data['last_message_id'] = message.message_id
    return DISTRICT

async def handle_district(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    data = query.data
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if 'last_message_id' in context.user_data:
        await delete_previous_message(context, user_id, context.user_data['last_message_id'])
    
    if data == 'back_to_category':
        city = context.user_data.get('city')
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in PRODUCTS[city].keys()]
        keyboard.append([InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'select_category'),
            reply_markup=reply_markup
        )
        context.user_data['last_message_id'] = message.message_id
        return CATEGORY
    
    district = data.replace('dist_', '')
    city = context.user_data.get('city')
    
    if city not in DISTRICTS or district not in DISTRICTS[city]:
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'error')
        )
        context.user_data['last_message_id'] = message.message_id
        return DISTRICT
    
    context.user_data['district'] = district
    
    keyboard = [[InlineKeyboardButton(del_type, callback_data=f"del_{del_type}")] for del_type in DELIVERY_TYPES]
    keyboard.append([InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_district")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=user_id,
        text=get_text(lang, 'select_delivery'),
        reply_markup=reply_markup
    )
    context.user_data['last_message_id'] = message.message_id
    return DELIVERY

async def handle_delivery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    data = query.data
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if 'last_message_id' in context.user_data:
        await delete_previous_message(context, user_id, context.user_data['last_message_id'])
    
    if data == 'back_to_district':
        city = context.user_data.get('city')
        districts = DISTRICTS.get(city, [])
        keyboard = [[InlineKeyboardButton(district, callback_data=f"dist_{district}")] for district in districts]
        keyboard.append([InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_category")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'select_district'),
            reply_markup=reply_markup
        )
        context.user_data['last_message_id'] = message.message_id
        return DISTRICT
    
    delivery_type = data.replace('del_', '')
    
    if delivery_type not in DELIVERY_TYPES:
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'error')
        )
        context.user_data['last_message_id'] = message.message_id
        return DELIVERY
    
    context.user_data['delivery_type'] = delivery_type
    
    city = context.user_data.get('city')
    category = context.user_data.get('category')
    price = context.user_data.get('price')
    district = context.user_data.get('district')
    
    order_text = get_text(
        lang, 
        'order_summary',
        product=category,
        price=price,
        district=district,
        delivery_type=delivery_type
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")],
        [InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_delivery")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=user_id,
        text=order_text,
        reply_markup=reply_markup
    )
    context.user_data['last_message_id'] = message.message_id
    return CONFIRMATION

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    data = query.data
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if 'last_message_id' in context.user_data:
        await delete_previous_message(context, user_id, context.user_data['last_message_id'])
    
    if data == 'back_to_delivery':
        keyboard = [[InlineKeyboardButton(del_type, callback_data=f"del_{del_type}")] for del_type in DELIVERY_TYPES]
        keyboard.append([InlineKeyboardButton(get_text(lang, 'back'), callback_data="back_to_district")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=user_id,
            text=get_text(lang, 'select_delivery'),
            reply_markup=reply_markup
        )
        context.user_data['last_message_id'] = message.message_id
        return DELIVERY
    
    if data == 'confirm_yes':
        city = context.user_data.get('city')
        category = context.user_data.get('category')
        price = context.user_data.get('price')
        district = context.user_data.get('district')
        delivery_type = context.user_data.get('delivery_type')
        
        product_info = f"{category} –≤ {city}, —Ä–∞–π–æ–Ω {district}, {delivery_type}"
        
        order = create_coingate_order(price, 'USD', product_info)
        
        if order:
            expires_at = datetime.now() + timedelta(minutes=30)
            add_transaction(
                user_id,
                price,
                'USD',
                order['id'],
                order['payment_url'],
                expires_at,
                product_info
            )
            
            payment_text = get_text(
                lang,
                'payment_instructions',
                amount=price,
                currency='USD',
                payment_address=order['payment_url']
            )
            
            message = await context.bot.send_message(
                chat_id=user_id,
                text=payment_text,
                parse_mode='Markdown'
            )
            context.user_data['last_message_id'] = message.message_id
            
            context.job_queue.run_once(
                check_payment,
                1800,
                context={
                    'user_id': user_id,
                    'order_id': order['id'],
                    'chat_id': user_id,
                    'product_info': product_info,
                    'lang': lang
                }
            )
            
            return PAYMENT
        else:
            message = await context.bot.send_message(
                chat_id=user_id,
                text=get_text(lang, 'error')
            )
            context.user_data['last_message_id'] = message.message_id
            return CONFIRMATION
    else:
        await show_main_menu(update, context, user_id, lang)
        return MAIN_MENU

async def check_payment(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    order_id = job.context['order_id']
    user_id = job.context['user_id']
    chat_id = job.context['chat_id']
    lang = job.context['lang']
    
    status_info = check_payment_status(order_id)
    
    if status_info and status_info.get('status') == 'paid':
        product_info = job.context['product_info']
        
        add_purchase(
            user_id,
            product_info,
            status_info['price_amount'],
            '',
            ''
        )
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=get_text(lang, 'payment_success', product_image=PRODUCTS['–¢–±–∏–ª–∏—Å–∏']['0.5 –º–µ—Ñ']['image'])
        )
        
        update_transaction_status(order_id, 'paid')
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=get_text(lang, 'payment_timeout')
        )
        
        user = get_user(user_id)
        failed_payments = user['failed_payments'] + 1
        update_user(user_id, failed_payments=failed_payments)
        
        if failed_payments >= 3:
            ban_until = datetime.now() + timedelta(hours=24)
            update_user(user_id, ban_until=ban_until.strftime('%Y-%m-%d %H:%M:%S'))
            await context.bot.send_message(
                chat_id=chat_id,
                text=get_text(lang, 'ban_message')
            )
        
        update_transaction_status(order_id, 'expired')

async def handle_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data['language'] or 'ru'
    amount_text = update.message.text
    
    try:
        amount = float(amount_text)
        if amount <= 0:
            await update.message.reply_text(get_text(lang, 'error'))
            return BALANCE
        
        current_balance = user_data['balance'] or 0
        new_balance = current_balance + amount
        update_user(user.id, balance=new_balance)
        
        await update.message.reply_text(
            get_text(lang, 'balance_add_success', amount=amount, balance=new_balance)
        )
        
        await show_main_menu(update, context, user.id, lang)
        return MAIN_MENU
    except ValueError:
        await update.message.reply_text(get_text(lang, 'error'))
        return BALANCE

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    await show_main_menu(update, context, user_id, lang)
    return MAIN_MENU

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_data = get_user(user_id)
    lang = user_data['language'] or 'ru'
    text = update.message.text
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
    if text.isdigit():
        context.user_data['balance_amount'] = float(text)
        return await handle_balance(update, context)
    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context, user_id, lang)
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    user_data = get_user(user.id)
    lang = user_data['language'] or 'ru'
    
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning('Update "%s" caused error "%s"', update, context.error)
    
    if update is None:
        logger.error("Update is None, cannot process error")
        return
    
    try:
        chat_id = None
        user = None
        
        if update.message:
            chat_id = update.message.chat_id
            user = update.message.from_user
        elif update.callback_query and update.callback_query.message:
            chat_id = update.callback_query.message.chat_id
            user = update.callback_query.from_user
        elif update.callback_query:
            chat_id = update.callback_query.from_user.id
            user = update.callback_query.from_user
        elif update.effective_chat:
            chat_id = update.effective_chat.id
            user = update.effective_user
        
        if chat_id is None:
            logger.error("Cannot determine chat_id for error message")
            return
        
        user_data = get_user(user.id) if user else None
        lang = user_data['language'] or 'ru' if user_data else 'ru'
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=get_text(lang, 'error')
        )
    except Exception as e:
        logger.error(f"Failed to send error message: {e}")

def main():
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('menu', menu_command)],
        states={
            CAPTCHA: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_captcha)],
            LANGUAGE: [CallbackQueryHandler(set_language)],
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            CATEGORY: [CallbackQueryHandler(handle_category)],
            DISTRICT: [CallbackQueryHandler(handle_district)],
            DELIVERY: [CallbackQueryHandler(handle_delivery)],
            CONFIRMATION: [CallbackQueryHandler(handle_confirmation)],
            BALANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_balance)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=check_pending_transactions, args=(application,), daemon=True).start()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è Render
    port = int(os.environ.get('PORT', 5000))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏ –Ω–∞ Render, –ø–æ–ª–ª–∏–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ
    if 'RENDER' in os.environ:
        # –ù–∞ Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
        webhook_url = os.environ.get('RENDER_EXTERNAL_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=TOKEN,
                webhook_url=f"{webhook_url}/{TOKEN}",
                drop_pending_updates=True
            )
        else:
            application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–ª–∏–Ω–≥
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()
