import asyncpg
from asyncpg.pool import Pool
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
db_pool: Pool = None

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
ALLOWED_USER_COLUMNS = {
    'username', 'first_name', 'language', 'captcha_passed',
    'ban_until', 'failed_payments', 'purchase_count', 'discount', 'balance'
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—ç—à–∏
texts_cache = {}
cities_cache = []
districts_cache = {}
products_cache = {}
delivery_types_cache = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db(database_url):
    global db_pool
    db_pool = await asyncpg.create_pool(database_url, ssl='require')
    
    async with db_pool.acquire() as conn:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            language TEXT DEFAULT 'ru',
            captcha_passed INTEGER DEFAULT 0,
            ban_until TIMESTAMP NULL,
            failed_payments INTEGER DEFAULT 0,
            purchase_count INTEGER DEFAULT 0,
            discount INTEGER DEFAULT 0,
            balance REAL DEFAULT 0.0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            amount REAL,
            currency TEXT,
            status TEXT,
            order_id TEXT,
            payment_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expires_at TIMESTAMP,
            product_info TEXT,
            invoice_uuid TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ invoice_uuid –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç
        try:
            await conn.execute("SELECT invoice_uuid FROM transactions LIMIT 1")
        except Exception as e:
            await conn.execute('ALTER TABLE transactions ADD COLUMN invoice_uuid TEXT')
            logger.info("Added invoice_uuid column to transactions table")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS purchases (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            product TEXT,
            price REAL,
            district TEXT,
            delivery_type TEXT,
            purchase_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'completed',
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
        ''')
        
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS texts (
            id SERIAL PRIMARY KEY,
            lang TEXT NOT NULL,
            key TEXT NOT NULL,
            value TEXT NOT NULL,
            UNIQUE(lang, key)
        )
        ''')
        
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS cities (
            id SERIAL PRIMARY KEY,
            name TEXT UNIQUE NOT NULL
        )
        ''')
        
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS districts (
            id SERIAL PRIMARY KEY,
            city_id INTEGER REFERENCES cities(id) ON DELETE CASCADE,
            name TEXT NOT NULL,
            UNIQUE(city_id, name)
        )
        ''')
        
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            city_id INTEGER REFERENCES cities(id) ON DELETE CASCADE,
            name TEXT NOT NULL,
            price REAL NOT NULL,
            image_url TEXT,
            UNIQUE(city_id, name)
        )
        ''')
        
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS delivery_types (
            id SERIAL PRIMARY KEY,
            name TEXT UNIQUE NOT NULL
        )
        ''')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
        await init_default_data(conn)
        
    return db_pool

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def init_default_data(conn):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    texts_count = await conn.fetchval('SELECT COUNT(*) FROM texts')
    if texts_count == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
        default_texts = {
            'ru': {
                'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                'captcha': '–î–ª—è –≤—Ö–æ–¥–∞ —Ä–µ—à–∏—Ç–µ –∫–∞–ø—Ç—á—É: {code}\n–í–≤–µ–¥–∏—Ç–µ 5 —Ü–∏—Ñ—Ä:',
                'captcha_failed': '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—Ç—á–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                'language_selected': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π',
                'main_menu': "üë§ –ò–º—è: {name}\nüìõ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\nüõí –ü–æ–∫—É–ø–æ–∫: {purchases}\nüéØ –°–∫–∏–¥–∫–∞: {discount}%\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}$",
                'select_city': '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:',
                'select_category': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                'select_district': '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:',
                'select_delivery': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:',
                'order_summary': "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\nüì¶ –¢–æ–≤–∞—Ä: {product}\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}$\nüèô –†–∞–π–æ–Ω: {district}\nüöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_type}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
                'select_crypto': '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
                'payment_instructions': "–û–ø–ª–∞—Ç–∏—Ç–µ {amount} {currency} –ø–æ –∞–¥—Ä–µ—Å—É:\n`{payment_address}`\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                'payment_timeout': '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.',
                'payment_success': '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à —Ç–æ–≤–∞—Ä:\n\n{product_image}',
                'balance': '–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$',
                'balance_add': '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ $:',
                'balance_add_success': '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}$. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$',
                'support': '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @support_username',
                'bonuses': '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n- –ó–∞ –∫–∞–∂–¥—É—é 5-—é –ø–æ–∫—É–ø–∫—É —Å–∫–∏–¥–∫–∞ 10%\n- –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 50$ –Ω–∞ –±–∞–ª–∞–Ω—Å',
                'rules': '–ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –Ω–∏–∫–æ–º—É –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ\n2. –û–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç\n3. –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª - –±–∞–Ω',
                'reviews': '–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: @reviews_channel',
                'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'ban_message': '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 24 —á–∞—Å–∞ –∏–∑-–∑–∞ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã.',
                'back': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                'main_menu_button': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'last_order': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ',
                'no_orders': '–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤'
            },
            'en': {
                'welcome': 'Welcome!',
                'captcha': 'To enter, solve the captcha: {code}\nEnter 5 digits:',
                'captcha_failed': 'Invalid captcha! Try again:',
                'language_selected': 'Language set: English',
                'main_menu': "üë§ Name: {name}\nüìõ Username: @{username}\nüõí Purchases: {purchases}\nüéØ Discount: {discount}%\nüí∞ Balance: {balance}$",
                'select_city': 'Select city:',
                'select_category': 'Select category:',
                'select_district': 'Select district:',
                'select_delivery': 'Select delivery type:',
                'order_summary': "Order information:\nüì¶ Product: {product}\nüíµ Price: {price}$\nüèô District: {district}\nüöö Delivery type: {delivery_type}\n\nIs everything correct?",
                'select_crypto': 'Select cryptocurrency for payment:',
                'payment_instructions': "Pay {amount} {currency} to address:\n`{payment_address}`\n\nOr scan QR-code:\nAfter payment, the product will be sent automatically.",
                'payment_timeout': 'Payment time has expired. Order canceled.',
                'payment_success': 'Payment received! Your product:\n\n{product_image}',
                'balance': 'Your balance: {balance}$',
                'balance_add': 'Enter the amount to top up your balance in $:',
                'balance_add_success': 'Balance topped up by {amount}$. Current balance: {balance}$',
                'support': 'For all questions contact @support_username',
                'bonuses': 'Bonus system:\n- 10% discount for every 5th purchase\n- Invite a friend and get 50$ on your balance',
                'rules': 'Rules:\n1. Do not share order information with anyone\n2. Payment only within 60 minutes\n3. Ban for breaking the rules',
                'reviews': 'Our reviews: @reviews_channel',
                'error': 'An error occurred. Please try again later.',
                'ban_message': 'You are banned for 24 hours due to 3 failed payment attempts.',
                'back': '‚¨ÖÔ∏è Back',
                'main_menu_button': 'üè† Main Menu',
                'last_order': 'Information about last order',
                'no_orders': 'You have no orders yet'
            },
            'ka': {
                'welcome': '·Éô·Éî·Éó·Éò·Éö·Éò ·Éò·Éß·Éù·É° ·Éó·É•·Éï·Éî·Éú·Éò ·Éõ·Éù·Éë·É†·É´·Éê·Éú·Éî·Éë·Éê!',
                'captcha': '·É®·Éî·É°·Éê·É°·Éï·Éö·Éî·Éö·Éê·Éì ·Éí·Éê·Éì·Éê·É¨·Éß·Éï·Éò·É¢·Éî·Éó captcha: {code}\n·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó 5 ·É™·Éò·É§·É†·Éò:',
                'captcha_failed': '·Éê·É†·Éê·É°·É¨·Éù·É†·Éò captcha! ·É°·É™·Éê·Éì·Éî·Éó ·Éó·Éê·Éï·Éò·Éì·Éê·Éú:',
                'language_selected': '·Éî·Éú·Éê ·Éì·Éê·Éß·Éî·Éú·Éî·Éë·É£·Éö·Éò·Éê: ·É•·Éê·É†·Éó·É£·Éö·Éò',
                'main_menu': "üë§ ·É°·Éê·ÉÆ·Éî·Éö·Éò: {name}\nüìõ ·Éõ·Éù·Éõ·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éö·Éò·É° ·É°·Éê·ÉÆ·Éî·Éö·Éò: @{username}\nüõí ·Éß·Éò·Éì·Éï·Éî·Éë·Éò: {purchases}\nüéØ ·É§·Éê·É°·Éì·Éê·Éô·Éö·Éî·Éë·Éê: {discount}%\nüí∞ ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance}$",
                'select_city': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·É•·Éê·Éö·Éê·É•·Éò:',
                'select_category': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éô·Éê·É¢·Éî·Éí·Éù·É†·Éò·Éê:',
                'select_district': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·É†·Éê·Éò·Éù·Éú·Éò:',
                'select_delivery': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É° ·É¢·Éò·Éû·Éò:',
                'order_summary': "·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê:\nüì¶ ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò: {product}\nüíµ ·É§·Éê·É°·Éò: {price}$\nüèô ·É†·Éê·Éò·Éù·Éú·Éò: {district}\nüöö ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É° ·É¢·Éò·Éû·Éò: {delivery_type}\n\n·Éß·Éï·Éî·Éö·Éê·É§·Éî·É†·Éò ·É°·É¨·Éù·É†·Éò·Éê?",
                'select_crypto': '·Éê·Éò·É†·É©·Éò·Éî·Éó ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éê ·Éí·Éê·Éì·Éê·É°·Éê·ÉÆ·Éì·Éî·Éö·Éê·Éì:',
                'payment_instructions': "·Éí·Éê·Éì·Éê·Éò·ÉÆ·Éê·Éì·Éî·Éó {amount} {currency} ·Éõ·Éò·É°·Éê·Éõ·Éê·É†·Éó·Éñ·Éî:\n`{payment_address}`\n\n·Éê·Éú ·É°·Éô·Éê·Éú·Éò·É†·Éî·Éë·Éê QR-·Éô·Éù·Éì·Éò:\n·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò ·Éí·Éê·Éõ·Éù·Éí·Éî·Éí·Éñ·Éê·Éï·Éú·Éî·Éë·Éê·Éó ·Éê·Éï·É¢·Éù·Éõ·Éê·É¢·É£·É†·Éê·Éì.",
                'payment_timeout': '·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éì·É†·Éù ·Éê·Éõ·Éù·Éò·É¨·É£·É†·Éê. ·É®·Éî·Éô·Éï·Éî·Éó·Éê ·Éí·Éê·É£·É•·Éõ·Éî·Éë·É£·Éö·Éò·Éê.',
                'payment_success': '·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éõ·Éò·É¶·Éî·Éë·É£·Éö·Éò·Éê! ·Éó·É•·Éï·Éî·Éú·Éò ·Éû·É†·Éù·Éì·É£·É•·É¢·Éò:\n\n{product_image}',
                'balance': '·Éó·É•·Éï·Éî·Éú·Éò ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance}$',
                'balance_add': '·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó ·Éë·Éê·Éö·Éê·Éú·É°·Éò·É° ·É®·Éî·Éï·É°·Éî·Éë·Éò·É° ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê $:',
                'balance_add_success': '·Éë·Éê·Éö·Éê·Éú·É°·Éò ·É®·Éî·Éò·Éï·É°·Éù {amount}$-·Éò·Éó. ·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·Éë·Éê·Éö·Éê·Éú·É°·Éò: {balance}$',
                'support': '·Éß·Éï·Éî·Éö·Éê ·Éô·Éò·Éó·ÉÆ·Éï·Éò·É°·Éó·Éï·Éò·É° ·Éì·Éê·É£·Éô·Éê·Éï·É®·Éò·É†·Éì·Éò·Éó @support_username',
                'bonuses': '·Éë·Éù·Éú·É£·É° ·É°·Éò·É°·É¢·Éî·Éõ·Éê:\n- ·Éß·Éù·Éï·Éî·Éö ·Éõ·Éî-5 ·Éß·Éò·Éì·Éï·Éê·Éñ·Éî 10% ·É§·Éê·É°·Éì·Éê·Éô·Éö·Éî·Éë·Éê\n- ·Éõ·Éù·Éò·É¨·Éï·Éò·Éî ·Éõ·Éî·Éí·Éù·Éë·Éê·É†·Éò ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî 50$ ·Éë·Éê·Éö·Éê·Éú·É°·Éñ·Éî',
                'rules': '·É¨·Éî·É°·Éî·Éë·Éò:\n1. ·Éê·É†·Éê·Éï·Éò·É° ·Éê·É† ·É®·Éî·Éê·ÉÆ·Éù·Éó ·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê\n2. ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éê ·Éõ·ÉÆ·Éù·Éö·Éù·Éì 60 ·É¨·É£·Éó·Éò·É° ·Éí·Éê·Éú·Éõ·Éê·Éï·Éö·Éù·Éë·Éê·É®·Éò\n3. ·É¨·Éî·É°·Éî·Éë·Éò·É° ·Éì·Éê·É†·É¶·Éï·Éî·Éï·Éê·Éñ·Éî - ·Éë·Éê·Éú·Éò',
                'reviews': '·É©·Éï·Éî·Éú·Éò ·Éõ·Éò·Éõ·Éù·ÉÆ·Éò·Éö·Éï·Éî·Éë·Éò: @reviews_channel',
                'error': '·Éõ·Éù·ÉÆ·Éì·Éê ·É®·Éî·É™·Éì·Éù·Éõ·Éê. ·É°·É™·Éê·Éì·Éî·Éó ·Éõ·Éù·Éí·Éï·Éò·Éê·Éú·Éî·Éë·Éò·Éó.',
                'ban_message': '3 ·É¨·Éê·É†·É£·Éõ·Éê·É¢·Éî·Éë·Éî·Éö·Éò ·Éí·Éê·Éì·Éê·ÉÆ·Éì·Éò·É° ·Éõ·É™·Éì·Éî·Éö·Éù·Éë·Éò·É° ·Éí·Éê·Éõ·Éù ·Éó·É•·Éï·Éî·Éú ·Éì·Éê·Éë·Éö·Éù·Éô·Éò·Éö·Éò ·ÉÆ·Éê·É†·Éó 24 ·É°·Éê·Éê·Éó·Éò·É° ·Éí·Éê·Éú·Éõ·Éê·Éï·Éö·Éù·Éë·Éê·É®·Éò.',
                'back': '‚¨ÖÔ∏è ·É£·Éô·Éê·Éú',
                'main_menu_button': 'üè† ·Éõ·Éó·Éê·Éï·Éê·É†·Éò ·Éõ·Éî·Éú·Éò·É£',
                'last_order': '·Éë·Éù·Éö·Éù ·É®·Éî·Éô·Éï·Éî·Éó·Éò·É° ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê',
                'no_orders': '·ÉØ·Éî·É† ·Éê·É† ·Éí·Éê·É•·Éï·Éó ·É®·Éî·Éô·Éï·Éî·Éó·Éî·Éë·Éò'
            }
        }
        
        for lang, translations in default_texts.items():
            for key, value in translations.items():
                await conn.execute('''
                INSERT INTO texts (lang, key, value)
                VALUES ($1, $2, $3)
                ON CONFLICT (lang, key) DO NOTHING
                ''', lang, key, value)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
    cities_count = await conn.fetchval('SELECT COUNT(*) FROM cities')
    if cities_count == 0:
        cities = ['–¢–±–∏–ª–∏—Å–∏', '–ì–æ—Ä–∏', '–ö—É—Ç–∞–∏—Å–∏', '–ë–∞—Ç—É–º–∏']
        for city in cities:
            city_id = await conn.fetchval('''
            INSERT INTO cities (name) VALUES ($1) 
            ON CONFLICT (name) DO NOTHING
            RETURNING id
            ''', city)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            if city == '–¢–±–∏–ª–∏—Å–∏':
                districts = ['–¶–µ—Ä–µ—Ç–µ–ª–∏', '–¶–µ–Ω—Ç—Ä', '–°–∞–±—É—Ä—Ç–∞–ª–æ']
            else:
                districts = ['–¶–µ–Ω—Ç—Ä', '–ó–∞–ø–∞–¥–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π']
                
            for district in districts:
                await conn.execute('''
                INSERT INTO districts (city_id, name)
                VALUES ($1, $2)
                ON CONFLICT (city_id, name) DO NOTHING
                ''', city_id, district)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            if city == '–¢–±–∏–ª–∏—Å–∏':
                products = [
                    ('0.5 –º–µ—Ñ', 35, 'https://example.com/image1.jpg'),
                    ('1.0 –º–µ—Ñ', 70, 'https://example.com/image2.jpg'),
                    ('0.5 –º–µ—Ñ –∑–æ–ª–æ—Ç–æ–π', 50, 'https://example.com/image3.jpg'),
                    ('0.3 –∫—Ä–∞—Å–Ω—ã–π', 35, 'https://example.com/image4.jpg')
                ]
            else:
                products = [
                    ('0.5 –º–µ—Ñ', 35, 'https://example.com/image1.jpg'),
                    ('1.0 –º–µ—Ñ', 70, 'https://example.com/image2.jpg')
                ]
                
            for product_name, price, image_url in products:
                await conn.execute('''
                INSERT INTO products (city_id, name, price, image_url)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (city_id, name) DO NOTHING
                ''', city_id, product_name, price, image_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_count = await conn.fetchval('SELECT COUNT(*) FROM delivery_types')
    if delivery_count == 0:
        delivery_types = ['–ü–æ–¥—ä–µ–∑–¥', '–ü—Ä–∏–∫–æ–ø', '–ú–∞–≥–Ω–∏—Ç', '–í–æ –¥–≤–æ—Ä–∞—Ö']
        for delivery_type in delivery_types:
            await conn.execute('''
            INSERT INTO delivery_types (name) VALUES ($1)
            ON CONFLICT (name) DO NOTHING
            ''', delivery_type)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
async def load_cache():
    global texts_cache, cities_cache, districts_cache, products_cache, delivery_types_cache
    
    try:
        async with db_pool.acquire() as conn:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
            texts_cache = {}
            for lang in ['ru', 'en', 'ka']:
                rows = await conn.fetch('SELECT key, value FROM texts WHERE lang = $1', lang)
                texts_cache[lang] = {row['key']: row['value'] for row in rows}
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
            cities_rows = await conn.fetch('SELECT * FROM cities ORDER BY name')
            cities_cache = [dict(row) for row in cities_rows]
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–π–æ–Ω–æ–≤
            districts_cache = {}
            for city in cities_cache:
                districts = await conn.fetch('SELECT * FROM districts WHERE city_id = $1 ORDER BY name', city['id'])
                districts_cache[city['name']] = [district['name'] for district in districts]
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            products_cache = {}
            for city in cities_cache:
                products = await conn.fetch('''
                    SELECT p.name, p.price, p.image_url 
                    FROM products p 
                    WHERE p.city_id = $1 
                    ORDER BY p.name
                ''', city['id'])
                products_cache[city['name']] = {
                    product['name']: {
                        'price': product['price'], 
                        'image': product['image_url']
                    } for product in products
                }
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_types = await conn.fetch('SELECT * FROM delivery_types ORDER BY name')
            delivery_types_cache = [delivery_type['name'] for delivery_type in delivery_types]
            
        logger.info("–ö—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def get_text(lang, key, **kwargs):
    if lang not in texts_cache:
        lang = 'ru'
    if key not in texts_cache[lang]:
        return f"–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {key}"
    
    text = texts_cache[lang][key]
    try:
        if kwargs:
            text = text.format(**kwargs)
        return text
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}, –∫–ª—é—á: {key}, –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {kwargs}")
        return text

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_user(user_id):
    async with db_pool.acquire() as conn:
        return await conn.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)

async def update_user(user_id, **kwargs):
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    valid_updates = {k: v for k, v in kwargs.items() if k in ALLOWED_USER_COLUMNS}
    if not valid_updates:
        return
        
    set_clause = ", ".join([f"{k} = ${i+2}" for i, k in enumerate(valid_updates.keys())])
    values = list(valid_updates.values()) + [user_id]
    
    async with db_pool.acquire() as conn:
        await conn.execute(f'UPDATE users SET {set_clause} WHERE user_id = ${len(values)}', *values)

async def add_transaction(user_id, amount, currency, order_id, payment_url, expires_at, product_info, invoice_uuid):
    async with db_pool.acquire() as conn:
        await conn.execute('''
        INSERT INTO transactions (user_id, amount, currency, status, order_id, payment_url, expires_at, product_info, invoice_uuid)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        ''', user_id, amount, currency, 'pending', order_id, payment_url, expires_at, product_info, invoice_uuid)

async def add_purchase(user_id, product, price, district, delivery_type):
    async with db_pool.acquire() as conn:
        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
        await conn.execute('''
        WITH new_purchase AS (
            INSERT INTO purchases (user_id, product, price, district, delivery_type)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING user_id
        )
        UPDATE users 
        SET purchase_count = purchase_count + 1 
        WHERE user_id = $1
        ''', user_id, product, price, district, delivery_type)

async def get_pending_transactions():
    async with db_pool.acquire() as conn:
        return await conn.fetch('SELECT * FROM transactions WHERE status = $1 AND expires_at > NOW()', 'pending')

async def update_transaction_status(order_id, status):
    async with db_pool.acquire() as conn:
        await conn.execute('UPDATE transactions SET status = $1 WHERE order_id = $2', status, order_id)

async def update_transaction_status_by_uuid(invoice_uuid, status):
    async with db_pool.acquire() as conn:
        await conn.execute('UPDATE transactions SET status = $1 WHERE invoice_uuid = $2', status, invoice_uuid)

async def get_last_order(user_id):
    async with db_pool.acquire() as conn:
        return await conn.fetchrow('SELECT * FROM purchases WHERE user_id = $1 ORDER BY purchase_time DESC LIMIT 1', user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_banned(user_id):
    user = await get_user(user_id)
    if user and user['ban_until']:
        try:
            ban_until = user['ban_until']
            if isinstance(ban_until, str):
                ban_until = datetime.strptime(ban_until, '%Y-%m-%d %H:%M:%S')
            if ban_until > datetime.now():
                return True
        except ValueError:
            return False
    return False
